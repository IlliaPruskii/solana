"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserStats = void 0;
const web3_js_1 = require("@solana/web3.js");
const pollingUserStatsAccountSubscriber_1 = require("./accounts/pollingUserStatsAccountSubscriber");
const webSocketUserStatsAccountSubsriber_1 = require("./accounts/webSocketUserStatsAccountSubsriber");
const pda_1 = require("./addresses/pda");
class UserStats {
    constructor(config) {
        var _a, _b, _c, _d, _e;
        this.driftClient = config.driftClient;
        this.userStatsAccountPublicKey = config.userStatsAccountPublicKey;
        if (((_a = config.accountSubscription) === null || _a === void 0 ? void 0 : _a.type) === 'polling') {
            this.accountSubscriber = new pollingUserStatsAccountSubscriber_1.PollingUserStatsAccountSubscriber(config.driftClient.program, config.userStatsAccountPublicKey, config.accountSubscription.accountLoader);
        }
        else if (((_b = config.accountSubscription) === null || _b === void 0 ? void 0 : _b.type) === 'websocket') {
            this.accountSubscriber = new webSocketUserStatsAccountSubsriber_1.WebSocketUserStatsAccountSubscriber(config.driftClient.program, config.userStatsAccountPublicKey, {
                resubTimeoutMs: (_c = config.accountSubscription) === null || _c === void 0 ? void 0 : _c.resubTimeoutMs,
                logResubMessages: (_d = config.accountSubscription) === null || _d === void 0 ? void 0 : _d.logResubMessages,
            }, config.accountSubscription.commitment);
        }
        else {
            throw new Error(`Unknown user stats account subscription type: ${(_e = config.accountSubscription) === null || _e === void 0 ? void 0 : _e.type}`);
        }
    }
    async subscribe(userStatsAccount) {
        this.isSubscribed = await this.accountSubscriber.subscribe(userStatsAccount);
        return this.isSubscribed;
    }
    async fetchAccounts() {
        await this.accountSubscriber.fetch();
    }
    async unsubscribe() {
        await this.accountSubscriber.unsubscribe();
        this.isSubscribed = false;
    }
    getAccountAndSlot() {
        return this.accountSubscriber.getUserStatsAccountAndSlot();
    }
    getAccount() {
        return this.accountSubscriber.getUserStatsAccountAndSlot().data;
    }
    getReferrerInfo() {
        if (this.getAccount().referrer.equals(web3_js_1.PublicKey.default)) {
            return undefined;
        }
        else {
            return {
                referrer: (0, pda_1.getUserAccountPublicKeySync)(this.driftClient.program.programId, this.getAccount().referrer, 0),
                referrerStats: (0, pda_1.getUserStatsAccountPublicKey)(this.driftClient.program.programId, this.getAccount().referrer),
            };
        }
    }
    static getOldestActionTs(account) {
        return Math.min(account.lastFillerVolume30DTs.toNumber(), account.lastMakerVolume30DTs.toNumber(), account.lastTakerVolume30DTs.toNumber());
    }
}
exports.UserStats = UserStats;
