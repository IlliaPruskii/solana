"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastSingleTxSender = void 0;
const types_1 = require("./types");
const web3_js_1 = require("@solana/web3.js");
const anchor_1 = require("@coral-xyz/anchor");
const baseTxSender_1 = require("./baseTxSender");
const DEFAULT_TIMEOUT = 35000;
const DEFAULT_BLOCKHASH_REFRESH = 10000;
class FastSingleTxSender extends baseTxSender_1.BaseTxSender {
    constructor({ connection, wallet, opts = { ...anchor_1.AnchorProvider.defaultOptions(), maxRetries: 0 }, timeout = DEFAULT_TIMEOUT, blockhashRefreshInterval = DEFAULT_BLOCKHASH_REFRESH, additionalConnections = new Array(), skipConfirmation = false, blockhashCommitment = 'finalized', confirmationStrategy = types_1.ConfirmationStrategy.Combo, }) {
        super({
            connection,
            wallet,
            opts,
            timeout,
            additionalConnections,
            confirmationStrategy,
        });
        this.timoutCount = 0;
        this.connection = connection;
        this.wallet = wallet;
        this.opts = opts;
        this.timeout = timeout;
        this.blockhashRefreshInterval = blockhashRefreshInterval;
        this.additionalConnections = additionalConnections;
        this.skipConfirmation = skipConfirmation;
        this.blockhashCommitment = blockhashCommitment;
        this.startBlockhashRefreshLoop();
    }
    startBlockhashRefreshLoop() {
        if (this.blockhashRefreshInterval > 0) {
            this.blockhashIntervalId = setInterval(async () => {
                try {
                    this.recentBlockhash = (await this.connection.getLatestBlockhash(this.blockhashCommitment)).blockhash;
                }
                catch (e) {
                    console.error('Error in startBlockhashRefreshLoop: ', e);
                }
            }, this.blockhashRefreshInterval);
        }
    }
    async prepareTx(tx, additionalSigners, _opts, preSigned) {
        return super.prepareTx(tx, additionalSigners, _opts, preSigned);
    }
    async getVersionedTransaction(ixs, lookupTableAccounts, additionalSigners, opts, blockhash) {
        var _a;
        if (additionalSigners === undefined) {
            additionalSigners = [];
        }
        if (opts === undefined) {
            opts = this.opts;
        }
        let recentBlockhash = '';
        if (blockhash) {
            recentBlockhash = blockhash;
        }
        else {
            recentBlockhash =
                (_a = this.recentBlockhash) !== null && _a !== void 0 ? _a : (await this.connection.getLatestBlockhash(opts.preflightCommitment))
                    .blockhash;
        }
        const message = new web3_js_1.TransactionMessage({
            payerKey: this.wallet.publicKey,
            recentBlockhash,
            instructions: ixs,
        }).compileToV0Message(lookupTableAccounts);
        const tx = new web3_js_1.VersionedTransaction(message);
        return tx;
    }
    async sendRawTransaction(rawTransaction, opts) {
        let txid;
        try {
            txid = await this.connection.sendRawTransaction(rawTransaction, opts);
            this.sendToAdditionalConnections(rawTransaction, opts);
        }
        catch (e) {
            console.error(e);
            throw e;
        }
        let slot;
        if (!this.skipConfirmation) {
            try {
                const result = await this.confirmTransaction(txid, opts.commitment);
                slot = result.context.slot;
            }
            catch (e) {
                console.error(e);
                throw e;
            }
        }
        return { txSig: txid, slot };
    }
}
exports.FastSingleTxSender = FastSingleTxSender;
