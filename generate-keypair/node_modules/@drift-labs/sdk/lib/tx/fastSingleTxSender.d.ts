/// <reference types="node" />
/// <reference types="node" />
import { ConfirmationStrategy, TxSigAndSlot } from './types';
import { ConfirmOptions, Signer, Transaction, Connection, VersionedTransaction, TransactionInstruction, AddressLookupTableAccount, Commitment } from '@solana/web3.js';
import { IWallet } from '../types';
import { BaseTxSender } from './baseTxSender';
export declare class FastSingleTxSender extends BaseTxSender {
    connection: Connection;
    wallet: IWallet;
    opts: ConfirmOptions;
    timeout: number;
    blockhashRefreshInterval: number;
    additionalConnections: Connection[];
    timoutCount: number;
    recentBlockhash: string;
    skipConfirmation: boolean;
    blockhashCommitment: Commitment;
    blockhashIntervalId: NodeJS.Timer;
    constructor({ connection, wallet, opts, timeout, blockhashRefreshInterval, additionalConnections, skipConfirmation, blockhashCommitment, confirmationStrategy, }: {
        connection: Connection;
        wallet: IWallet;
        opts?: ConfirmOptions;
        timeout?: number;
        blockhashRefreshInterval?: number;
        additionalConnections?: any;
        skipConfirmation?: boolean;
        blockhashCommitment?: Commitment;
        confirmationStrategy?: ConfirmationStrategy;
    });
    startBlockhashRefreshLoop(): void;
    prepareTx(tx: Transaction, additionalSigners: Array<Signer>, _opts: ConfirmOptions, preSigned?: boolean): Promise<Transaction>;
    getVersionedTransaction(ixs: TransactionInstruction[], lookupTableAccounts: AddressLookupTableAccount[], additionalSigners?: Array<Signer>, opts?: ConfirmOptions, blockhash?: string): Promise<VersionedTransaction>;
    sendRawTransaction(rawTransaction: Buffer | Uint8Array, opts: ConfirmOptions): Promise<TxSigAndSlot>;
}
