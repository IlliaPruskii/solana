/// <reference types="node" />
import { ConfirmOptions, Connection } from '@solana/web3.js';
import { IWallet } from '../types';
import { BaseTxSender } from './baseTxSender';
import { ConfirmationStrategy, TxSigAndSlot } from './types';
type ResolveReference = {
    resolve?: () => void;
};
export declare class ForwardOnlyTxSender extends BaseTxSender {
    connection: Connection;
    wallet: IWallet;
    opts: ConfirmOptions;
    timeout: number;
    retrySleep: number;
    additionalConnections: Connection[];
    timoutCount: number;
    constructor({ connection, wallet, opts, timeout, retrySleep, confirmationStrategy, additionalTxSenderCallbacks, }: {
        connection: Connection;
        wallet: IWallet;
        opts?: ConfirmOptions;
        timeout?: number;
        retrySleep?: number;
        confirmationStrategy?: ConfirmationStrategy;
        additionalTxSenderCallbacks?: ((base58EncodedTx: string) => void)[];
    });
    sleep(reference: ResolveReference): Promise<void>;
    sendToAdditionalConnections(rawTx: Buffer | Uint8Array, _opts: ConfirmOptions): void;
    sendRawTransaction(rawTransaction: Buffer | Uint8Array, opts: ConfirmOptions): Promise<TxSigAndSlot>;
}
export {};
